library(plumber)
    library(lubridate)
    library(bigrquery)
    library(jsonlite)
    library(stringr)
    library(dplyr)
    library(withr)
    library(tibble)
    library(rio)
    
    
    
    #* heartbeat...
    #* @get /
    #* @post /
    function(){
      return("alive")
    }
    
    #* @get /debug
    #* @post /debug
    #* @serializer json
    function(){
      xx =list(indebug=TRUE)
      tryCatch({
        xx$start=TRUE
        cat("Attempting to aquire token ...
")
        bq_auth()
        token = bq_token()
        xx$have_token=bq_has_token()
        cat("	Do I have a token: ",xx$have_token,"
")
        xx$done=TRUE
      },
      error=function(){
        cat("ERROR ",e,"
")
      }
      )
      toJSON(xx,auto_unbox = T)
    }
    
    #* Runs PROD qa_qc
    #* @get /qaqc
    #* @post /qaqc
    #* @serializer json
    function() {
      retval=list()
      tryCatch(
        {
          #  read dictionary from Github
          dictionary = rio::import("https://episphere.github.io/conceptGithubActions/aggregate.json",format = "json")
          retval["dictLen"] = length(dictionary)
          
 
          # BigQuery table where QC report will be saved---------------
          QC_report_location = "nih-nci-dceg-connect-stg-5519.Biospecimens.QC_report"
          
          # 2 part definition for querying the data sitting in BigQuery
          project = "nih-nci-dceg-connect-stg-5519"
          sql = "SELECT * FROM `nih-nci-dceg-connect-stg-5519.Connect.Biospecimens.flatBoxes_WL`"
          
          # sites:
          # Sanford Health = 657167265
          # HealthPartners = 531629870
          # Henry Ford Health System = 548392715
          # Kaiser Permanente Colorado = 125001209
          # Kaiser Permanente Georgia = 327912200
          # Kaiser Permanente Hawaii = 300267574
          # Kaiser Permanente Northwest = 452412599
          # Marshfiled = 303349821
          # University of Chicago Medicine = 809703864
          # National Cancer Institute = 517700004
          # Other = 181769837
          
          # define site to run QC -----------
          # Sanford
          site= 657167265 
          retval["Sanford"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # HealthPartners
          site= 531629870 
          retval["HealthPartners"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # Henry Ford Health System
          site= 548392715 
          retval["HFHS"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # Kaiser Permanente Colorado
          site= 125001209 
          retval["KPCO"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # Kaiser Permanente Georgia
          site= 327912200 
          retval["KPGA"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # Kaiser Permanente Hawaii
          site= 300267574 
          retval["KPHI"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # Kaiser Permanente Northwest
          site= 452412599 
          retval["KPNW"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # Marshfiled
          site= 303349821 
          retval["Marshfield"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # University of Chicago Medicine
          site= 809703864 
          retval["UC"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # National Cancer Institute
          site= 517700004 
          retval["NCI"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
          
          # define site to run QC----------
          # Other
          site= 181769837 
          retval["OTHER"]=runQC(site= site, project= project, sql= sql, QC_report_location = QC_report_location, dictionary=dictionary)
        },
        error=function(e){
          message("caught error ",e)
          retval["note"] = paste0("caught error: ",e)
          retval["error"] = e
        })
      
      toJSON(retval,auto_unbox = T)
    }
    
    
    # function to translate QC report inside runQC function-----------------------------
    TRANSLATE.COL <- function(report, translate.these.cols, new.col.names, dictionary ){
      
      # read dictionary json
      dict <- dictionary
      new_error_report = report
      # translate 1 or more columns
      for (columnIndex in 1:length(translate.these.cols)){
        translate.this.col = translate.these.cols[columnIndex]
        new.col.name = new.col.names[columnIndex]
        
        # add new translated column
        p1= paste0("add_column(new_error_report", ",")
        p2= new.col.name
        p3= paste0("=NA, .after = translate.this.col)")
        txt=paste0(p1,p2,p3)
        new_error_report <- eval(parse(text=txt))
        ############# initialize row counts for translation loop
        run = 1
        ############ begin translation -----------
        while(run <= length(new_error_report[[translate.this.col]])){
          for(row in new_error_report[[translate.this.col]]){
            if(grepl(pattern=",",row)){
              newRow2 = c()
              row2 = as.numeric(strsplit(row,",")[[1]])
            }else {
              newRow2 = c()
              row2 = as.numeric(row)
            }
            ############# START 1st "ELSE IF" LOGIC TO CHECK ROW FORMAT #############
            #("NA", string, integer list plus an "NA", or integer list,) 
            #----------------------------------------- if row is missing
            if(is.na(row)| row=="") {
              na_str = ""
              ab = ""
              #----------------------------------------- else if row is non number
            }else if (!is.na(row) & is.na(row2)) {
              na_str = ""
              ab= row
              #----------------------------------------- else if row is not blank because it has numbers and an NA!!
            }else if (( testInteger(as.numeric(strsplit(gsub(", NA", "" , row),",")[[1]])) |
                        testInteger(as.numeric(strsplit(gsub(", NA", "" , row),",")[[1]]))) &
                      !is.na(row2) & (grepl( ", NA", row, fixed = TRUE) | grepl( ", NA,", row, fixed = TRUE))) {
              row = gsub(", NA", "" , row)
              row = gsub(", NA,", "" , row) # remove na in row and redefine row2 (numbers)
              row2 = as.numeric(strsplit(row,",")[[1]])
              ab = paste0("dict$",""",row2,""", collapse=NULL)
              na_str = ", NA"
              #----------------------------------------- else if row is number list
            }else if( testInteger(row2) & !is.na(row2) & !is.na(row) & row !=""){
              ab = paste0("dict$",""",row2,""", collapse=NULL)
              na_str = ""
            }
            ############# START 2nd "ELSE IF" LOGIC TO TRANSLATE INTEGER LIST of 1 or more CIDs OR KEEP BLANK ROWS AND STRING ROWS AS IS ########
            # for list of concept IDs (fixed 0517 Lorena)
            if(length(ab)>1){
              for(cid in ab){
                newRow = paste(eval(parse(text=cid)),sep=",")
                newRow2 = c(newRow2,newRow)
              }
              # for single concept ID
            }else if(numbers_only(row)){
              newRow2 = eval(parse(text=ab))
              # for value other than single concept ID or ConceptID list 
            }else if(length(ab)==1){
              newRow2 = ab
            }          
            ############# BEGIN REPLACING TRANSLATED VALUES INTO NEW COLUMN ##########################
            newRow3 = paste0(toString(newRow2,sep = ", "), na_str)
            new_error_report[[new.col.name]][[run]] = newRow3
            run = run+1
          } }}
      
      return(new_error_report)
    }
    
    # function to test vector for integers
    testInteger <- function(x){test <- all.equal(x, as.integer(x), check.attributes = FALSE)
    if(test == TRUE){ return(TRUE)
    } else { return(FALSE) }
    }
    
    # function to check that it does not match any non-number ----------------------------------------------------------------------------
    numbers_only <- function(x) !grepl("\\D", x)
    
    # function to exclude rows with certain values in QC (ie. "d" not in list "a,b,c")
    "%!in%" <- function(x,y)!("%in%"(x,y)

    # function to run QC by site--------------------------------------------
    runQC = function(site,project, sql, QC_report_location){
    
    #GET RECRUITMENT TABLES FROM BIGQUERY IN nih-nci-dceg-connect-stg-5519 PROJECT
    # set project
    project <- project
    
    # set query
    sql <- sql
    tb <- bq_project_query(project, sql)
    connectData = bq_table_download(tb, bigint = c("character"))
    # filter data by site
    
    site= site
    connectData = connectData[connectData$d_827220437 == site & !is.na(connectData$d_827220437),]   
    #connectData = connectData %>% mutate(across(everything(), as.character)) # added 0527 to change int64 to string, but using newer version below 
    
    # changed int64 to string and leave dates as date type to prevent missing data. Integer blanks are NA, charater blanks are "".
    connectData = as_tibble(connectData) %>% mutate_if(~!is.POSIXct(.x), as.character)  
    
    # make qc dataframe
    df = data.frame(matrix( nrow=1, ncol=8))
    
    names(df) = c("ConceptID","QCtype","valid_values","condition", "invalid_values_found", "row_number", "token", "ConnectID")
######## QC d_827220437
# cross valid value check - checks values if condition one is met and checks values if condition is not met

            d_827220437_a = c(531629870, 548392715, 125001209, 327912200, 300267574, 452412599, 303349821, 657167265, 809703864, 517700004, 181769837, 13)


            mylist_a1 =  paste0(rep("connectData$d_512820379 == "), c(854703046), sep =" | ")

            mylist_a2 = str_c(mylist_a1, sep = "", collapse ="") # make many or statements

            mylist_a3 = paste0("(",str_sub(mylist_a2, end =-4),")") #remove extra " |" at the end of string

            aa = which(eval(parse(text=mylist_a3))) # remove quotes to make logical expression

            QCcheck1 =which(connectData$"d_827220437"[aa]%!in%d_827220437_a)

            rowNum<-QCcheck1
            token<- connectData$"token"[QCcheck1]
            ID = connectData$Connect_ID[aa][QCcheck1]
            d_827220437_invalid_cross = addNA(connectData$"d_827220437"[aa][QCcheck1])

            df[1,1]<-substr(paste0("d_827220437"),3,100)

            df[1,2]<-paste0("CROSSVALID1")

            df[1,3]<-paste0("531629870, 548392715, 125001209, 327912200, 300267574, 452412599, 303349821, 657167265, 809703864, 517700004, 181769837, 13")

            df[1,4]<-str_sub(mylist_a2, end =-4)

            df[1,5]<-paste0(d_827220437_invalid_cross, collapse=", ")

            df[1,6]<-paste0(rowNum, collapse=", ")

            df[1,7]<-paste0(token, collapse=", ")
 
            df[1,8]<-paste0(ID, collapse=", ")


# filter df to show QC errors only

    qc_errors = filter(df, (!is.na(df$"invalid_values_found") ))
    
    qc_errors = filter(qc_errors, (qc_errors$"invalid_values_found" != "" ))
    
    # TRANSLATE REPORT 
    
    qc_errors=TRANSLATE.COL(report= qc_errors , 
                            translate.these.cols = c("ConceptID", "valid_values"),
                            new.col.names = c("ConceptID_translated","valid_values_translated"),
                            dictionary = dictionary)
    
    # add "no errors found" row if no rows found in QC report
    if (nrow(qc_errors)==0){
      qc_errors[1, ] = c("no errors found")
    
    # add site column
    qc_errors = add_column(qc_errors, site = as.character(site) , .before=1)
    # add date column
    qc_errors = add_column(qc_errors, date = Sys.Date() , .before=1)
    
    ######## upload report to bigquery ##############################
    
    #Append data to an existing table or create a table if if doesnt exist
    bq_table_upload(x=QC_report_location,
                    values=qc_errors,
                    fields = qc_errors,
                    create_disposition="CREATE_IF_NEEDED",
                    write_disposition="WRITE_APPEND")

    }}
    
